// Generated by Butterfly TypeScript converter
// File: delay.kt
// Package: com.lightningkite.butterfly
import {Observable, Subject} from 'rxjs'
import {ObservableProperty} from "./observables/ObservableProperty";
import {ConstantObservableProperty} from "./observables/ConstantObservableProperty";
import {ApplicationAccess} from "./ApplicationAccess";

//! Declares com.lightningkite.butterfly.delay
export function delay(milliseconds: number, action: () => void) {
    if(milliseconds === 0){
        action();
    } else {
        setTimeout(action, milliseconds);
    }
}

//! Declares com.lightningkite.butterfly.post
export function post(action: () => void) {
    setTimeout(action);
}

//! Declares com.lightningkite.butterfly.animationFrame
export const _animationFrame: Subject<number> = new Subject();
let active = false;
export function getAnimationFrame(): Subject<number> {
    if(active) return _animationFrame;
    active = true;
    let last = 0;
    requestAnimationFrame(function callback(ms){
        if(last === 0) {
            last = ms;
        }
        const delta = (ms - last) / 1000;
        last = ms;
        _animationFrame.next(delta);
        if(_animationFrame.observers.length > 0){
            requestAnimationFrame(callback);
        } else {
            active = false;
        }
    });
    return _animationFrame;
}

//! Declares com.lightningkite.butterfly.applicationIsActive
export function getApplicationIsActive(): ObservableProperty<boolean> {
    return ApplicationAccess.INSTANCE.foreground;
}

