// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: Video.kt
// Package: com.lightningkite.butterfly
import { hashAnything, safeEq } from './Kotlin'

//! Declares com.lightningkite.butterfly.Video
export class Video {
    public constructor() {
    }
}
//! Declares com.lightningkite.butterfly.VideoReference
export class VideoReference extends Video {
    public readonly uri: File;
    public constructor(uri: File) {
        super();
        this.uri = uri;
    }
    public hashCode(): number {
        let hash = 17;
        hash = 31 * hash + hashAnything(this.uri);
        return hash;
    }
    public equals(other: any): boolean { return other instanceof VideoReference && safeEq(this.uri, other.uri) }
    public toString(): string { return `VideoReference(uri = ${this.uri})` }
    public copy(uri: File = this.uri): VideoReference { return new VideoReference(uri); }
}
//! Declares com.lightningkite.butterfly.VideoRemoteUrl
export class VideoRemoteUrl extends Video {
    public readonly url: string;
    public constructor(url: string) {
        super();
        this.url = url;
    }
    public hashCode(): number {
        let hash = 17;
        hash = 31 * hash + hashAnything(this.url);
        return hash;
    }
    public equals(other: any): boolean { return other instanceof VideoRemoteUrl && safeEq(this.url, other.url) }
    public toString(): string { return `VideoRemoteUrl(url = ${this.url})` }
    public copy(url: string = this.url): VideoRemoteUrl { return new VideoRemoteUrl(url); }
}

//! Declares com.lightningkite.butterfly.asVideo>kotlin.String
export function xStringAsVideo(this_: string): Video { 
    return new VideoRemoteUrl(this_); 
}
//! Declares com.lightningkite.butterfly.asVideo>android.net.Uri
export function xUriAsVideo(this_: File): Video { 
    return new VideoReference(this_); 
}

