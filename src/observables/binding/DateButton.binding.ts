// Generated by Butterfly TypeScript converter
// File: observables/binding/DateButton.binding.kt
// Package: com.lightningkite.butterfly.observables.binding
import {xObservablePropertySubscribeBy} from '../ObservableProperty.ext'
import {dateFrom, xDateDateAloneGet, xDateTimeAloneGet, xDateSet} from '../../time/Date'
import {xViewRemovedGet, xDisposableUntil} from '../../rx/DisposeCondition.ext'
import {xTimeAloneIso8601, TimeAlone} from '../../time/TimeAlone'
import {MutableObservableProperty} from '../MutableObservableProperty'
import {xDateAloneIso8601, DateAlone} from '../../time/DateAlone'

//! Declares com.lightningkite.butterfly.observables.binding.bind>com.lightningkite.butterfly.views.DateButton
export function xDateButtonBind(this_: HTMLInputElement, date: MutableObservableProperty<Date>): void {
    let suppress = false;
    xDisposableUntil(xObservablePropertySubscribeBy(date, undefined, undefined, (it) => {
        if(suppress) return;
        suppress = true;
        const ta = xDateDateAloneGet(it);
        this_.value = xDateAloneIso8601(ta);
        suppress = false;
    }), xViewRemovedGet(this_));
    this_.onchange = (e) => {
        if(suppress) return;
        suppress = true;
        try {
            const d = DateAlone.Companion.INSTANCE.iso(this_.value);
            const current = date.value;
            xDateSet(current, d);
            date.value = current;
        } catch(e){
            console.warn("Failed to parse " + this_.value)
            console.warn(e);
        }
        suppress = false;
    }
}


//! Declares com.lightningkite.butterfly.observables.binding.bind>com.lightningkite.butterfly.views.TimeButton
export function xTimeButtonBind(this_: HTMLInputElement, date: MutableObservableProperty<Date>, minuteInterval: number = 1): void {
    let suppress = false;
    xDisposableUntil(xObservablePropertySubscribeBy(date, undefined, undefined, (it) => {
        if(suppress) return;
        suppress = true;
        const ta = xDateTimeAloneGet(it);
        this_.value = xTimeAloneIso8601(ta);
        suppress = false;
    }), xViewRemovedGet(this_));
    this_.onchange = (e) => {
        if(suppress) return;
        suppress = true;
        try {
            const d = TimeAlone.Companion.INSTANCE.iso(this_.value);
            const current = date.value;
            xDateSet(current, d);
            date.value = current;
        } catch(e){
            console.warn("Failed to parse " + this_.value)
            console.warn(e);
        }
        suppress = false;
    }
}


//! Declares com.lightningkite.butterfly.observables.binding.bindDateAlone>com.lightningkite.butterfly.views.DateButton
export function xDateButtonBindDateAlone(this_: HTMLInputElement, date: MutableObservableProperty<DateAlone>): void {
    let suppress = false;
    xDisposableUntil(xObservablePropertySubscribeBy(date, undefined, undefined, (it) => {
        if(suppress) return;
        suppress = true;
        this_.value = xDateAloneIso8601(it);
        suppress = false;
    }), xViewRemovedGet(this_));
    this_.onchange = (e) => {
        if(suppress) return;
        suppress = true;
        const d = DateAlone.Companion.INSTANCE.iso(this_.value);
        if(d){
            date.value = d;
        } else {
            console.warn("Failed to parse " + this_.value)
            console.warn(e);
        }
        suppress = false;
    }
}


//! Declares com.lightningkite.butterfly.observables.binding.bindTimeAlone>com.lightningkite.butterfly.views.TimeButton
export function xTimeButtonBindTimeAlone(this_: HTMLInputElement, date: MutableObservableProperty<TimeAlone>, minuteInterval: number = 1): void {
    let suppress = false;
    xDisposableUntil(xObservablePropertySubscribeBy(date, undefined, undefined, (it) => {
        if(suppress) return;
        suppress = true;
        this_.value = xTimeAloneIso8601(it);
        suppress = false;
    }), xViewRemovedGet(this_));
    this_.onchange = (e) => {
        if(suppress) return;
        suppress = true;
        const d = TimeAlone.Companion.INSTANCE.iso(this_.value);
        if(d){
            date.value = d;
        } else {
            console.warn("Failed to parse " + this_.value)
            console.warn(e);
        }
        suppress = false;
    }
}

