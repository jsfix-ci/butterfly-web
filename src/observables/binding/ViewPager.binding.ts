// Generated by Butterfly TypeScript converter
// File: observables/binding/ViewPager.binding.kt
// Package: com.lightningkite.butterfly.observables.binding
import { xObservablePropertySubscribeBy as opSubBy } from '../ObservableProperty.ext'
import { xViewRemovedGet, xDisposableUntil } from '../../rx/DisposeCondition.ext'
import { StandardObservableProperty } from '../StandardObservableProperty'
import { ObservableProperty } from '../ObservableProperty'
import { xObservablePropertyMap } from '../TransformedObservableProperty'
import { MutableObservableProperty } from '../MutableObservableProperty'
import {findView} from "../../views/View.ext";
import {swapViewSwap} from "../../views/SwapView";
import {xObservablePropertyCombine} from "../CombineObservableProperty";

/*
We need:
- A main view that swaps
- A left button
- A right button
Such should be generated by the XML.
 */

//! Declares com.lightningkite.butterfly.observables.binding.bind>androidx.viewpager.widget.ViewPager
export function xViewPagerBindStatic<T>(
    this_: HTMLDivElement,
    items: Array<T>,
    showIndex: MutableObservableProperty<number> = new StandardObservableProperty(0, undefined),
    makeView: (a: T) => HTMLElement
): void {
    const content = findView(this_, (e)=> e.classList.contains("butterfly-pager-content")) as HTMLDivElement;
    const left = findView(this_, (e)=> e.classList.contains("butterfly-pager-left")) as HTMLButtonElement;
    const right = findView(this_, (e)=> e.classList.contains("butterfly-pager-right")) as HTMLButtonElement;
    if(!content || !left || !right) return;
    let pastIndex = showIndex.value;
    xDisposableUntil(opSubBy(showIndex, undefined, undefined, (it)=>{
        if(it < 0 || it >= items.length) return;
        const newView = makeView(items[it]);
        let animation = "butterfly-animate-fade";
        if(it > pastIndex) {
            animation = "butterfly-animate-push"
        } else if (it < pastIndex){
            animation = "butterfly-animate-pop"
        }
        pastIndex = it;
        swapViewSwap(content, newView, animation);
    }), xViewRemovedGet(this_));
    left.onclick = (ev) => {
        ev.preventDefault()
        if(showIndex.value > 0){
            showIndex.value--;
        }
    }
    right.onclick = (ev) => {
        ev.preventDefault()
        if(showIndex.value < items.length - 1) {
            showIndex.value++;
        }
    }
}

//! Declares com.lightningkite.butterfly.observables.binding.bind>androidx.viewpager.widget.ViewPager
export function xViewPagerBind<T>(
    this_: HTMLDivElement,
    items: ObservableProperty<Array<T>>,
    _default: T,
    showIndex: MutableObservableProperty<number> = new StandardObservableProperty(0, undefined),
    makeView: (a: ObservableProperty<T>) => HTMLElement
): void {
    const content = findView(this_, (e)=> e.classList.contains("butterfly-pager-content")) as HTMLDivElement;
    const left = findView(this_, (e)=> e.classList.contains("butterfly-pager-left")) as HTMLButtonElement;
    const right = findView(this_, (e)=> e.classList.contains("butterfly-pager-right")) as HTMLButtonElement;
    if(!content || !left || !right) return;
    let pastIndex = showIndex.value;
    const combined = xObservablePropertyCombine(
        items,
        showIndex,
        (a, b) => [a, b] as [T[], number]
    );
    let currentObs = new StandardObservableProperty(_default);
    xDisposableUntil(opSubBy(items, undefined, undefined, (newItems)=>{
        let newItem = newItems[showIndex.value]
        if(newItem){
            currentObs.value = newItem
        } else {
            showIndex.value = newItems.length - 1
        }
    }), xViewRemovedGet(this_));
    xDisposableUntil(opSubBy(showIndex, undefined, undefined, (it)=>{
        if(it < 0 || it >= items.value.length) return;
        let currentObs = new StandardObservableProperty(items.value[it]);
        const newView = makeView(currentObs);
        let animation = "butterfly-animate-fade";
        if(it > pastIndex) {
            animation = "butterfly-animate-push"
        } else if (it < pastIndex){
            animation = "butterfly-animate-pop"
        }
        pastIndex = it;
        swapViewSwap(content, newView, animation);
    }), xViewRemovedGet(this_));
    left.onclick = (ev) => {
        ev.preventDefault()
        if(showIndex.value > 0){
            showIndex.value--;
        }
    };
    right.onclick = (ev) => {
        ev.preventDefault()
        if(showIndex.value < items.value.length - 1) {
            showIndex.value++;
        }
    };
}

