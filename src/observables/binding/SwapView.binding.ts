// Generated by Butterfly TypeScript converter
// File: observables/binding/SwapView.binding.kt
// Package: com.lightningkite.butterfly.observables.binding
import {xObservablePropertySubscribeBy} from '../ObservableProperty.ext'
import {xViewRemovedGet, xDisposableUntil} from '../../rx/DisposeCondition.ext'
import {ViewGenerator} from '../../views/ViewGenerator'
import {ObservableStack} from '../ObservableStack'
import {swapViewSwap} from "../../views/SwapView";

//! Declares com.lightningkite.butterfly.observables.binding.bindStack>com.lightningkite.butterfly.views.widget.SwapView
export function xSwapViewBindStack<T extends ViewGenerator>(this_: HTMLDivElement, dependency: Window, obs: ObservableStack<T>): void {
    let previousStackSize = obs.value.length;
    xDisposableUntil(xObservablePropertySubscribeBy(obs, undefined, undefined, (stack) => {
        const newStackSize = stack.length;
        let animation = "butterfly-animate-fade"
        if (newStackSize > previousStackSize) {
            animation = "butterfly-animate-push"
        } else if (newStackSize < previousStackSize) {
            animation = "butterfly-animate-pop"
        }
        previousStackSize = newStackSize;
        const newVG = stack[stack.length - 1] ?? null;
        const newView = newVG?.generate(dependency) ?? null;
        // if(newVG && newView){
        //     function setupBoundaryAction(newView: HTMLElement) {
        //         newView.khrysalisResizeBoundaryAction = () => {
        //             let newerView = newVG.generate(dependency)
        //             setupBoundaryAction(newerView)
        //             swapViewSwap(this_, newerView, "butterfly-animate-fade")
        //         }
        //     }
        //     setupBoundaryAction(newView)
        // }
        swapViewSwap(this_, newView, animation);
    }), xViewRemovedGet(this_));
}

