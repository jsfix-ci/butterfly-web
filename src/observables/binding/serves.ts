// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: observables/binding/serves.kt
// Package: com.lightningkite.butterfly.observables.binding
import { MutableObservableProperty } from '../MutableObservableProperty'
import { DisposeCondition } from '../../rx/DisposeCondition'
import { xDisposableUntil } from '../../rx/DisposeCondition.ext'
import { SubscriptionLike } from 'rxjs'
import { xObservablePropertyObservableGet } from '../ObservableProperty.ext'

//! Declares com.lightningkite.butterfly.observables.binding.serves>com.lightningkite.butterfly.observables.MutableObservableProperty<kotlin.Any>
export function xMutableObservablePropertyServes<T>(this_: MutableObservableProperty<T>, until: DisposeCondition, other: MutableObservableProperty<T>): void {
    
    let suppress = false;
    
    
    xDisposableUntil<SubscriptionLike>(xObservablePropertyObservableGet(other).subscribe((value: T): void => {
                if ((!suppress)) {
                    suppress = true;
                    this_.value = value;
                    suppress = false;
                }
    }, undefined, undefined), until);
    
    xDisposableUntil<SubscriptionLike>(this_.onChange.subscribe((value: T): void => {
                if ((!suppress)) {
                    suppress = true;
                    other.value = value;
                    suppress = false;
                }
    }, undefined, undefined), until);
}


