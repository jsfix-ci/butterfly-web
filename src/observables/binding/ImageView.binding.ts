// Generated by Khrysalis TypeScript converter
// File: observables/binding/ImageView.binding.actual.kt
// Package: com.lightningkite.butterfly.observables.binding
import {xObservablePropertySubscribeBy} from '../ObservableProperty.ext'
import {xViewRemovedGet, xDisposableUntil} from '../../rx/DisposeCondition.ext'
import {Image} from '../../Image'
import {ObservableProperty} from '../ObservableProperty'
import {xImageViewLoadImage, xImageViewLoadVideoThumbnail} from "../../views/ImageView";
import {post} from "../../delay";
import {NumberRange} from "../../kotlin/Language";

//! Declares com.lightningkite.butterfly.observables.binding.bindImage
export function xImageViewBindImage(this_: HTMLElement, image: ObservableProperty<(Image | null)>) {
    const img = findImageView(this_)
    if (img) {
        post(() => {
            xDisposableUntil(xObservablePropertySubscribeBy(image, undefined, undefined, (it) => {
                xImageViewLoadImage(img, it)
            }), xViewRemovedGet(this_))
        });
    }
}

//! Declares com.lightningkite.butterfly.observables.binding.bindVideoThumbnail
export function xImageViewBindVideoThumbnail(this_: HTMLElement, image: ObservableProperty<(Image | null)>) {
    const img = findImageView(this_)
    if (img) {
        post(() => {
            xDisposableUntil(xObservablePropertySubscribeBy(image, undefined, undefined, (it) => {
                xImageViewLoadVideoThumbnail(img, it)
            }), xViewRemovedGet(this_))
        });
    }
}

function findImageView(element: HTMLElement): HTMLImageElement | null {
    if (element instanceof HTMLImageElement) return element
    for (const childIndex of new NumberRange(0, element.children.length - 1)) {
        const child = element.children.item(childIndex)
        if (child instanceof HTMLImageElement) {
            return child
        }
    }
    return null
}
