// Generated by Butterfly TypeScript converter
// File: observables/binding/ViewFlipper.binding.kt
// Package: com.lightningkite.butterfly.observables.binding
import { xObservablePropertySubscribeBy } from '../ObservableProperty.ext'
import { xViewRemovedGet, xDisposableUntil } from '../../rx/DisposeCondition.ext'
import { ObservableProperty } from '../ObservableProperty'
import { also } from 'Kotlin'
import {swapViewSwap} from "../../views/SwapView";

//! Declares com.lightningkite.butterfly.observables.binding.bindLoading>android.widget.ViewFlipper
export function xViewFlipperBindLoading(this_: HTMLDivElement, loading: ObservableProperty<boolean>, color: (string | null) = null): void {
    const mainChild = this_.firstElementChild as HTMLElement;
    const loadingChild = this_.children.item(1) as HTMLElement ?? (()=>{
        const newElement = document.createElement("div") as HTMLDivElement;
        newElement.classList.add("butterfly-flipper-progress");
        newElement.classList.add("khr");
        this_.appendChild(newElement);
        return newElement;
    })()
    const animation = "butterfly-animate-fade";
    let currentView = mainChild;
    let hiddenView = loadingChild;
    xDisposableUntil(loading.onChange.subscribe(  (e)=>{
        if(e){
            hiddenView = mainChild;
            currentView = loadingChild;
        } else {
            currentView = mainChild;
            hiddenView = loadingChild;
        }

        // currentView.style.removeProperty("animation");
        // hiddenView.style.removeProperty("animation");
        // currentView.style.removeProperty("visibility");
        // hiddenView.style.removeProperty("visibility");

        const viewOut = hiddenView
        const viewIn = currentView

        viewOut.style.setProperty("visibility", "hidden", "important");
        viewIn.style.removeProperty("visibility");

        // //animate out
        // const animationOut = `${animation}-out`;
        // let animOutHandler: (ev: AnimationEvent) => void;
        // animOutHandler = (ev: AnimationEvent) => {
        //     if (ev.animationName === animationOut) {
        //         viewOut.onanimationend = null;
        //         viewOut.style.visibility = "hidden";
        //     }
        // };
        // viewOut.onanimationend = animOutHandler;
        // viewOut.style.animation = `${animationOut} 0.25s`;
        //
        // //animate in
        // const animationIn = `${animation}-in`;
        // let animInHandler: (ev: AnimationEvent) => void;
        // animInHandler = (ev: AnimationEvent) => {
        //     if (ev.animationName === animationIn) {
        //         viewIn.onanimationend = null;
        //         viewIn.style.removeProperty("animation");
        //     }
        // };
        // viewIn.onanimationend = animInHandler;
        // viewIn.style.animation = `${animationIn} 0.25s`;

    }), xViewRemovedGet(this_))

    if(loading.value){
        hiddenView = mainChild;
        currentView = loadingChild;
    } else {
        currentView = mainChild;
        hiddenView = loadingChild;
    }
    hiddenView.style.setProperty("visibility", "hidden", "important");
}