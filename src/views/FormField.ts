// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: views/FormField.kt
// Package: com.lightningkite.butterfly.views
import { MutableObservableProperty } from '../observables/MutableObservableProperty'
import { safeEq } from '../Kotlin'
import { Form } from './Form'
import { ViewString, ViewStringTemplate } from './ViewString'
import { StandardObservableProperty } from '../observables/StandardObservableProperty'
import { xCharSequenceIsBlank } from '../kotlin/kotlin.text'

//! Declares com.lightningkite.butterfly.views.FormValidationError
export class FormValidationError {
    public readonly field: UntypedFormField;
    public readonly _string: ViewString;
    public constructor(field: UntypedFormField, _string: ViewString) {
        this.field = field;
        this._string = _string;
    }
}

//! Declares com.lightningkite.butterfly.views.UntypedFormField
export interface UntypedFormField {
    
    readonly name: ViewString;
    
    readonly untypedObservable: any;
    
    readonly validation: ((a: UntypedFormField) => (ViewString | null));
    
    readonly error: StandardObservableProperty<(ViewString | null)>;
    
}


//! Declares com.lightningkite.butterfly.views.FormField
export class FormField<T> implements UntypedFormField {
    public static implementsInterfaceComLightningkiteButterflyViewsUntypedFormField = true;
    public readonly name: ViewString;
    public readonly observable: MutableObservableProperty<T>;
    public readonly validation:  ((a: UntypedFormField) => (ViewString | null));
    public constructor(name: ViewString, observable: MutableObservableProperty<T>, validation:  ((a: UntypedFormField) => (ViewString | null))) {
        this.name = name;
        this.observable = observable;
        this.validation = validation;
        this.error = new StandardObservableProperty<(ViewString | null)>(null, undefined);
    }
    
    public readonly error: StandardObservableProperty<(ViewString | null)>;
    
    //! Declares com.lightningkite.butterfly.views.FormField.value
    public get value(): T { return this.observable.value; }
    public set value(value: T) {
        this.observable.value = value;
    }
    
    //! Declares com.lightningkite.butterfly.views.FormField.untypedObservable
    public get untypedObservable(): any { return this.observable; }
    
}

//! Declares com.lightningkite.butterfly.views.required>com.lightningkite.butterfly.views.FormField<kotlin.String>
export function xFormFieldRequired(this_: FormField<string>): (ViewString | null) {
    if (xCharSequenceIsBlank(this_.observable.value)) {
        return new ViewStringTemplate(Form.Companion.INSTANCE.xIsRequired, [this_.name]);
    } else {
        return null;
    }
}

//! Declares com.lightningkite.butterfly.views.notNull>com.lightningkite.butterfly.views.FormField<kotlin.Any>
export function xFormFieldNotNull<T>(this_: FormField<T>): (ViewString | null) {
    if (this_.observable.value === null) {
        return new ViewStringTemplate(Form.Companion.INSTANCE.xIsRequired, [this_.name]);
    } else {
        return null;
    }
}

//! Declares com.lightningkite.butterfly.views.notFalse>com.lightningkite.butterfly.views.FormField<kotlin.Boolean>
export function xFormFieldNotFalse(this_: FormField<boolean>): (ViewString | null) {
    if ((!this_.observable.value)) {
        return new ViewStringTemplate(Form.Companion.INSTANCE.xIsRequired, [this_.name]);
    } else {
        return null;
    }
}

//! Declares com.lightningkite.butterfly.views.unless>com.lightningkite.butterfly.views.ViewString
export function xViewStringUnless(this_: ViewString, condition: boolean): (ViewString | null) {
    if (condition) {
        return null;
    } else {
        return this_;
    }
}


//! Declares com.lightningkite.butterfly.views.matches>com.lightningkite.butterfly.views.FormField<kotlin.Any>
export function xFormFieldMatches<T extends any>(this_: FormField<T>, other: FormField<T>): (ViewString | null) {
    if (!safeEq(this_.observable.value, other.observable.value)) {
        return new ViewStringTemplate(Form.Companion.INSTANCE.xMustMatchY, [this_.name, other.name]);
    } else {
        return null;
    }
}


