// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: views/SelectDateMonthCVD.kt
// Package: com.lightningkite.butterfly.views
import { safeEq } from '../Kotlin'
import { xDisposableForever } from '../rx/DisposeCondition.ext'
import { DateAlone } from '../time/DateAlone'
import { CalendarDrawing, MonthCVD } from './MonthCVD'
import { RectF } from './geometry/RectF'
import { DisplayMetrics } from './DisplayMetrics'
import { StandardObservableProperty } from '../observables/StandardObservableProperty'
import { SubscriptionLike } from 'rxjs'
import { Paint } from './draw/Paint'
import { copyDateAloneMod } from '../time/Date'
import { MutableObservableProperty } from '../observables/MutableObservableProperty'
import { runOrNull } from '../kotlin/Language'

//! Declares com.lightningkite.butterfly.views.SelectDateMonthCVD
export class SelectDateMonthCVD extends MonthCVD {
    public constructor() {
        super();
        this.selected = new StandardObservableProperty<(DateAlone | null)>(null, undefined);
        const it_349 = this.selected.value;
        if (it_349 !== null) { 
            this.currentMonthObs.value = copyDateAloneMod(it_349, Date.prototype.setDate, 1);
        };
        xDisposableForever<SubscriptionLike>(this.selected.onChange.subscribe( (value: (DateAlone | null)): void => {
                    this?.invalidate();
        }, undefined, undefined));
        this.selectedDayPaint = new Paint();
        this.selectedPaint = new Paint();
    }
    
    public generateAccessibilityView(): (HTMLElement | null) { 
        return null; 
    }
    
    public selected: MutableObservableProperty<(DateAlone | null)>;
    
    
    
    
    public readonly selectedDayPaint: Paint;
    
    public readonly selectedPaint: Paint;
    
    
    public drawDay(canvas: CanvasRenderingContext2D, showingMonth: DateAlone, day: DateAlone, displayMetrics: DisplayMetrics, outer: RectF, inner: RectF): void {
        if (safeEq(day, this.selected.value)){
            CalendarDrawing.INSTANCE.dayBackground(canvas, inner, this.selectedPaint);
            CalendarDrawing.INSTANCE.day(canvas, showingMonth, day, inner, this.selectedDayPaint);
        } else {
            CalendarDrawing.INSTANCE.day(canvas, showingMonth, day, inner, this.dayPaint);
        }
    }
    
    public measure(width: number, height: number, displayMetrics: DisplayMetrics): void {
        super.measure(width, height, displayMetrics);
        this.selectedDayPaint.textSize = this.dayPaint.textSize;
    }
    
    public onTap(day: DateAlone): void {
        this.selected.value = day;
    }
}

