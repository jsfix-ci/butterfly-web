// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: views/Form.kt
// Package: com.lightningkite.butterfly.views
import { listFilterNotNull } from '../KotlinCollections'
import { ViewString, ViewStringRaw, ViewStringResource, xListJoinToViewString } from './ViewString'
import { MutableObservableProperty } from '../observables/MutableObservableProperty'
import { FormField, FormValidationError, UntypedFormField } from './FormField'
import { showDialogAlert } from './showDialog'
import { StandardObservableProperty } from '../observables/StandardObservableProperty'

//! Declares com.lightningkite.butterfly.views.Form
export class Form {
    public constructor() {
        this.fields = [];
    }
    
    
    
    
    public readonly fields: Array<UntypedFormField>;
    
    
    public field<T>(name: ViewString, defaultValue: T, validation:  ((a: FormField<T>) => (ViewString | null))): FormField<T> {
        const obs = new StandardObservableProperty<T>(defaultValue, undefined);
        
        const field = new FormField<T>(name, obs, (untypedField: UntypedFormField): (ViewString | null) => validation(untypedField as FormField<T>));
        
        this.fields.push(field);
        return field;
    }
    
    public fieldRes<T>(name: string, defaultValue: T, validation:  ((a: FormField<T>) => (ViewString | null))): FormField<T> { 
        return this.field<T>(new ViewStringResource(name), defaultValue, validation); 
    }
    
    public fieldFromProperty<T>(name: ViewString, property: MutableObservableProperty<T>, validation:  ((a: FormField<T>) => (ViewString | null))): FormField<T> {
        const field = new FormField<T>(name, property, (untypedField: UntypedFormField): (ViewString | null) => validation(untypedField as FormField<T>));
        
        this.fields.push(field);
        return field;
    }
    
    public fieldFromPropertyRes<T>(name: string, property: MutableObservableProperty<T>, validation:  ((a: FormField<T>) => (ViewString | null))): FormField<T> { 
        return this.fieldFromProperty<T>(new ViewStringResource(name), property, validation); 
    }
    
    public check(): Array<FormValidationError> {
        return listFilterNotNull(this.fields.map((it: UntypedFormField): (FormValidationError | null) => {
                    const result = this.checkField(it);
                    
                    if (result !== null) {
                        return new FormValidationError(it, result!);
                    } else {
                        return null;
                    }
        }));
    }
    
    public runOrDialog(action: (() => void)): void {
        const errors = this.check();
        
        if (errors.length !== 0) {
            showDialogAlert(xListJoinToViewString(errors.map((it: FormValidationError): ViewString => it._string), undefined));
        } else {
            action();
        }
    }
    
    public checkField(field: UntypedFormField): (ViewString | null) {
        const result = field.validation(field);
        
        field.error.value = result;
        return result;
    }
}
export namespace Form {
    //! Declares com.lightningkite.butterfly.views.Form.Companion
    export class Companion {
        private constructor() {
            this.xIsRequired = new ViewStringRaw(`%1\$s is required.`);
            this.xMustMatchY = new ViewStringRaw(`%1\$s must match %2\$s.`);
        }
        public static INSTANCE = new Companion();
        
        public xIsRequired: ViewString;
        
        public xMustMatchY: ViewString;
        
    }
}

