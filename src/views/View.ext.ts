// Generated by Butterfly TypeScript converter
// File: views/View.ext.kt
// Package: com.lightningkite.butterfly.views

import {range} from "iterable-operator";

//! Declares com.lightningkite.butterfly.views.onClick>android.view.View
export function xViewOnClick(this_: HTMLElement, disabledMilliseconds: number = 500, action: () => void): void {
    let lastActivated = 0;

    this_.onclick = (_ev) => {
        _ev.stopPropagation();
        const it = _ev.target as HTMLElement;
        if (Date.now() - lastActivated > disabledMilliseconds) {
            action();
            lastActivated = Date.now();
        }
    };
}

//! Declares com.lightningkite.butterfly.views.onLongClick>android.view.View
export function xViewOnLongClick(this_: HTMLElement, action: () => void): void {
    this_.oncontextmenu = (_ev) => {
        _ev.stopPropagation();
        action();
    };
    let start = Number.MAX_SAFE_INTEGER
    this_.onpointerdown = (ev) => {
        ev.stopPropagation()
        start = Date.now()
    }
    this_.onpointerup = (ev) => {
        ev.stopPropagation()
        if(Date.now() - start > 1000) {
            action()
        }
        start = Number.MAX_SAFE_INTEGER
    }
}

export function getViewVisibility(this_: HTMLElement): string {
    if (this_.hidden) return "gone";
    if (this_.style.visibility === "hidden") return "invisible";
    return "visible";
}

export function setViewVisibility(this_: HTMLElement, value: string) {
    switch (value) {
        case "gone":
            this_.hidden = true;
            this_.style.visibility = "visible";
            break;
        case "visible":
            this_.hidden = false;
            this_.style.visibility = "visible";
            break;
        case "invisible":
            this_.hidden = false;
            this_.style.visibility = "hidden";
            break;
    }
    const p = this_.parentElement;
    if(p && (p.classList.contains("butterfly-box") || p.classList.contains("khrc"))) {
        setViewVisibility(p, value);
    }
}

export function findView(view: HTMLElement, predicate: (e: HTMLElement) => boolean): HTMLElement | null {
    for (let i = 0; i < view.children.length; i++) {
        const child = view.children.item(i);
        if (child instanceof HTMLElement && predicate(child)) {
            return child;
        }
    }
    return null;
}

export function setViewBackgroundClass(view: HTMLElement, cssClass: string) {
    if(view instanceof HTMLInputElement){
        view = view.parentElement!
    }
    let existing: Array<string> = [];
    for(const i of range(0, view.classList.length-1)) {
        const item = view.classList.item(i);
        if(item && item.startsWith("drawable-")){
            existing.push(item);
        }
    }
    view.classList.remove(...existing);
    view.classList.add(cssClass);
}

export function setViewBackgroundColor(view: HTMLElement, color: string) {
    if(view instanceof HTMLInputElement){
        view = view.parentElement!
    }
    view.style.backgroundColor = color
}