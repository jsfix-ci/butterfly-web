// Generated by Butterfly TypeScript converter
// File: views/ImageView.kt
// Package: com.lightningkite.butterfly.views
import {Image, ImageImageBitmap, ImageRaw, ImageReference, ImageRemoteUrl, ImageResource} from '../Image'
import {post} from "../delay";
import {setViewBackgroundClass} from "./View.ext";
import {DrawableResource} from "./DrawableResource";
import {Video} from "../Video";
import {xVideoThumbnail} from "../Video.ext";


//! Declares com.lightningkite.butterfly.observables.binding.loadImage>android.widget.ImageView
//! Declares com.lightningkite.butterfly.views.loadImage>android.widget.ImageView

function getImageView(element: HTMLElement): HTMLImageElement | null {
    if(element instanceof HTMLImageElement) {
        return element
    }
    for(let i = 0; i < element.childNodes.length; i++){
        let node = element.childNodes.item(i)
        if(node instanceof HTMLImageElement) return node
    }
    return null
}

export function xImageViewLoadImage(this_: HTMLElement, image: (Image | null)) {
    const imageView = getImageView(this_)
    if(imageView === null) return
    post(() => {
        if (image instanceof ImageRaw) {
            const url = URL.createObjectURL(new Blob([image.raw]));
            imageView.src = url;
        } else if (image instanceof ImageReference) {
            const reader = new FileReader();
            reader.onload = (e) => {
                const reader = e.target;
                if (reader !== null) {
                    imageView.src = reader.result as string;
                }
            }
            reader.readAsDataURL(image.uri)
        } else if (image instanceof ImageImageBitmap) {
            let canvasElement = document.createElement("canvas");
            canvasElement.width = image.bitmap.width;
            canvasElement.height = image.bitmap.height;
            const ctx = canvasElement.getContext("2d");
            if (ctx) {
                ctx.clearRect(0, 0, canvasElement.width, canvasElement.height);
                ctx.drawImage(image.bitmap, 0, 0);
            }
            canvasElement.toBlob((blob) => {
                const url = URL.createObjectURL(blob);
                imageView.src = url;
            })
        } else if (image instanceof ImageRemoteUrl) {
            imageView.src = image.url;
        } else if (image instanceof ImageResource) {
            imageViewSetImageResource(imageView, image.resource)
        }
    })
}

export function imageViewSetImageResource(this_: HTMLElement, resource: DrawableResource){
    const imageView = getImageView(this_)
    if(imageView === null) return
    let path = resource.filePath;
    if (path) {
        imageView.src = path;
    } else {
        //Not perfect, because it replaces the background.
        setViewBackgroundClass(imageView, resource.cssClass);
    }
}

//! Declares com.lightningkite.butterfly.observables.binding.loadVideoThumbnail>android.widget.ImageView
//! Declares com.lightningkite.butterfly.views.loadVideoThumbnail>android.widget.ImageView
export function xImageViewLoadVideoThumbnail(this_: HTMLElement, video: Video | null) {
    const imageView = getImageView(this_)
    if(imageView === null) return
    if(video !== null){
        imageView.src = "";
        xVideoThumbnail(video).subscribe((x)=>{
            xImageViewLoadImage(imageView, x);
        });
    }
}