"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: views/DjangoErrorTranslator.kt
// Package: com.lightningkite.butterfly.views
const Kotlin_1 = require("../Kotlin");
const rxjs_1 = require("rxjs");
const RxHttpAssist_1 = require("../net/RxHttpAssist");
const HttpResponse_1 = require("../net/HttpResponse");
const kotlin_text_1 = require("../kotlin/kotlin.text");
const ViewString_1 = require("./ViewString");
const operators_1 = require("rxjs/operators");
const Codable_1 = require("../Codable");
const HttpResponseError_1 = require("../net/HttpResponseError");
//! Declares com.lightningkite.butterfly.views.DjangoErrorTranslator
class DjangoErrorTranslator {
    constructor(connectivityErrorResource, serverErrorResource, otherErrorResource) {
        this.connectivityErrorResource = connectivityErrorResource;
        this.serverErrorResource = serverErrorResource;
        this.otherErrorResource = otherErrorResource;
    }
    handleNode(builder, node) {
        if (node === null) {
            return;
        }
        if (Kotlin_1.checkIsInterface(node, "KotlinCollectionsMap")) {
            for (const toDestructure of node) {
                const key = toDestructure[0];
                const value = toDestructure[1];
                this.handleNode(builder, value);
            }
        }
        else if (Kotlin_1.checkIsInterface(node, "KotlinCollectionsList")) {
            for (const value of node) {
                this.handleNode(builder, value);
            }
        }
        else if (typeof (node) == "string") {
            //Rough check for human-readability - sentences start with uppercase and will have spaces
            if (node !== "" && kotlin_text_1.xCharIsUpperCase(node[0]) && (node.indexOf(" ") != -1)) {
                builder.value += node + '\n';
            }
        }
    }
    parseError(code, error) {
        switch (code / 100) {
            case 0:
                return new ViewString_1.ViewStringResource(this.connectivityErrorResource);
            case 1:
            case 2:
            case 3:
                break;
            case 4:
                const errorJson = (() => {
                    if (error !== null) {
                        return Codable_1.xStringFromJsonStringUntyped(error);
                    }
                    else {
                        return null;
                    }
                })();
                if (errorJson !== null) {
                    const builder = new kotlin_text_1.StringBuilder();
                    this.handleNode(builder, errorJson);
                    return new ViewString_1.ViewStringRaw(builder.toString());
                }
                else {
                    return new ViewString_1.ViewStringRaw(error !== null && error !== void 0 ? error : "");
                }
                break;
            case 5:
                return new ViewString_1.ViewStringResource(this.serverErrorResource);
            default:
                break;
        }
        return new ViewString_1.ViewStringResource(this.otherErrorResource);
    }
    wrap(callback) {
        return (code, result, error) => {
            callback(result, this.parseError(code, error));
        };
    }
    wrapNoResponse(callback) {
        return (code, error) => {
            callback(this.parseError(code, error));
        };
    }
    parseException(exception) {
        return (() => {
            if (exception instanceof HttpResponseError_1.HttpResponseException) {
                return RxHttpAssist_1.xResponseReadText(exception.response).pipe(operators_1.map((it) => this.parseError(HttpResponse_1.xResponseCodeGet(exception.response), it)));
            }
            else if (exception instanceof rxjs_1.TimeoutError) {
                return rxjs_1.of(new ViewString_1.ViewStringResource(this.connectivityErrorResource));
            }
            else {
                return rxjs_1.of(new ViewString_1.ViewStringResource(this.otherErrorResource));
            }
        })();
    }
}
exports.DjangoErrorTranslator = DjangoErrorTranslator;
//# sourceMappingURL=DjangoErrorTranslator.js.map