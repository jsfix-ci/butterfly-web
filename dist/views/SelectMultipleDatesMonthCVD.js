"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: views/SelectMultipleDatesMonthCVD.kt
// Package: com.lightningkite.butterfly.views
const KotlinCollections_1 = require("../KotlinCollections");
const Date_1 = require("../time/Date");
const Kotlin_1 = require("../Kotlin");
const DisposeCondition_ext_1 = require("../rx/DisposeCondition.ext");
const DateAlone_1 = require("../time/DateAlone");
const DateAlone_ext_1 = require("../time/DateAlone.ext");
const MonthCVD_1 = require("./MonthCVD");
const lazyOp_1 = require("../kotlin/lazyOp");
const StandardObservableProperty_1 = require("../observables/StandardObservableProperty");
const Paint_1 = require("./draw/Paint");
//! Declares com.lightningkite.butterfly.views.SelectMultipleDatesMonthCVD
class SelectMultipleDatesMonthCVD extends MonthCVD_1.MonthCVD {
    constructor() {
        super();
        this.dates = new StandardObservableProperty_1.StandardObservableProperty(new KotlinCollections_1.EqualOverrideSet([]), undefined);
        this.selectedDayPaint = new Paint_1.Paint();
        this.selectedPaint = new Paint_1.Paint();
        const it_372 = KotlinCollections_1.iterFirstOrNull(this.dates.value);
        if (it_372 !== null) {
            this.currentMonthObs.value = Date_1.copyDateAloneMod(it_372, Date.prototype.setDate, 1);
        }
        ;
        DisposeCondition_ext_1.xDisposableForever(this.dates.onChange.subscribe((value) => {
            this === null || this === void 0 ? void 0 : this.invalidate();
        }, undefined, undefined));
        this.drawDay_dateAlone = new DateAlone_1.DateAlone(0, 0, 0);
        this.adding = false;
    }
    generateAccessibilityView() {
        return null;
    }
    measure(width, height, displayMetrics) {
        super.measure(width, height, displayMetrics);
        this.selectedDayPaint.textSize = this.dayPaint.textSize;
    }
    drawDay(canvas, showingMonth, day, displayMetrics, outer, inner) {
        if (this.dates.value.has(day)) {
            const leftDate = Date_1.dateAloneModRelative(DateAlone_ext_1.xDateAloneSet(this.drawDay_dateAlone, day), Date.prototype.getDate, Date.prototype.setDate, (-1));
            const left = this.dates.value.has(leftDate);
            const rightDate = Date_1.dateAloneModRelative(DateAlone_ext_1.xDateAloneSet(this.drawDay_dateAlone, day), Date.prototype.getDate, Date.prototype.setDate, 1);
            const right = this.dates.value.has(rightDate);
            if ((!left) && (!right)) {
                MonthCVD_1.CalendarDrawing.INSTANCE.dayBackground(canvas, inner, this.selectedPaint);
            }
            else if ((!left) && right) {
                MonthCVD_1.CalendarDrawing.INSTANCE.dayBackgroundStart(canvas, inner, outer, this.selectedPaint);
            }
            else if (left && (!right)) {
                MonthCVD_1.CalendarDrawing.INSTANCE.dayBackgroundEnd(canvas, inner, outer, this.selectedPaint);
            }
            else if (left && right) {
                MonthCVD_1.CalendarDrawing.INSTANCE.dayBackgroundMid(canvas, inner, outer, this.selectedPaint);
            }
            else {
                MonthCVD_1.CalendarDrawing.INSTANCE.dayBackground(canvas, inner, this.selectedPaint);
            }
            MonthCVD_1.CalendarDrawing.INSTANCE.day(canvas, showingMonth, day, inner, this.selectedDayPaint);
        }
        else {
            MonthCVD_1.CalendarDrawing.INSTANCE.day(canvas, showingMonth, day, inner, this.dayPaint);
        }
    }
    onTap(day) {
        this.adding = (!lazyOp_1.some(this.dates.value, (it) => Kotlin_1.safeEq(day, it)));
        this.onTouchMoveDate(day);
    }
    onTouchDownDate(day) {
        this.adding = (!lazyOp_1.some(this.dates.value, (it) => Kotlin_1.safeEq(day, it)));
        this.onTouchMoveDate(day);
        return true;
    }
    onTouchMoveDate(day) {
        if (this.adding) {
            if ((!lazyOp_1.some(this.dates.value, (it) => Kotlin_1.safeEq(day, it)))) {
                this.dates.value = new KotlinCollections_1.EqualOverrideSet([...this.dates.value, day]);
            }
        }
        else {
            this.dates.value = new KotlinCollections_1.EqualOverrideSet(lazyOp_1.toArray(lazyOp_1.filter(this.dates.value, (it) => !Kotlin_1.safeEq(it, day))));
        }
        return true;
    }
    onTouchUpDate(day) {
        return true;
    }
}
exports.SelectMultipleDatesMonthCVD = SelectMultipleDatesMonthCVD;
//# sourceMappingURL=SelectMultipleDatesMonthCVD.js.map