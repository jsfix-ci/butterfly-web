"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Generated by Butterfly TypeScript converter
// File: views/ImageView.kt
// Package: com.lightningkite.butterfly.views
const Image_1 = require("../Image");
const delay_1 = require("../delay");
const View_ext_1 = require("./View.ext");
const Video_ext_1 = require("../Video.ext");
//! Declares com.lightningkite.butterfly.observables.binding.loadImage>android.widget.ImageView
//! Declares com.lightningkite.butterfly.views.loadImage>android.widget.ImageView
function getImageView(element) {
    if (element instanceof HTMLImageElement) {
        return element;
    }
    for (let i = 0; i < element.childNodes.length; i++) {
        let node = element.childNodes.item(i);
        if (node instanceof HTMLImageElement)
            return node;
    }
    return null;
}
function xImageViewLoadImage(this_, image) {
    const imageView = getImageView(this_);
    if (imageView === null)
        return;
    delay_1.post(() => {
        if (image instanceof Image_1.ImageRaw) {
            const url = URL.createObjectURL(new Blob([image.raw]));
            imageView.src = url;
        }
        else if (image instanceof Image_1.ImageReference) {
            const reader = new FileReader();
            reader.onload = (e) => {
                const reader = e.target;
                if (reader !== null) {
                    imageView.src = reader.result;
                }
            };
            reader.readAsDataURL(image.uri);
        }
        else if (image instanceof Image_1.ImageImageBitmap) {
            let canvasElement = document.createElement("canvas");
            canvasElement.width = image.bitmap.width;
            canvasElement.height = image.bitmap.height;
            const ctx = canvasElement.getContext("2d");
            if (ctx) {
                ctx.clearRect(0, 0, canvasElement.width, canvasElement.height);
                ctx.drawImage(image.bitmap, 0, 0);
            }
            canvasElement.toBlob((blob) => {
                const url = URL.createObjectURL(blob);
                imageView.src = url;
            });
        }
        else if (image instanceof Image_1.ImageRemoteUrl) {
            imageView.src = image.url;
        }
        else if (image instanceof Image_1.ImageResource) {
            imageViewSetImageResource(imageView, image.resource);
        }
    });
}
exports.xImageViewLoadImage = xImageViewLoadImage;
function imageViewSetImageResource(this_, resource) {
    const imageView = getImageView(this_);
    if (imageView === null)
        return;
    let path = resource.filePath;
    if (path) {
        imageView.src = path;
    }
    else {
        //Not perfect, because it replaces the background.
        View_ext_1.setViewBackgroundClass(imageView, resource.cssClass);
    }
}
exports.imageViewSetImageResource = imageViewSetImageResource;
//! Declares com.lightningkite.butterfly.observables.binding.loadVideoThumbnail>android.widget.ImageView
//! Declares com.lightningkite.butterfly.views.loadVideoThumbnail>android.widget.ImageView
function xImageViewLoadVideoThumbnail(this_, video) {
    const imageView = getImageView(this_);
    if (imageView === null)
        return;
    if (video !== null) {
        imageView.src = "";
        Video_ext_1.xVideoThumbnail(video).subscribe((x) => {
            xImageViewLoadImage(imageView, x);
        });
    }
}
exports.xImageViewLoadVideoThumbnail = xImageViewLoadVideoThumbnail;
//# sourceMappingURL=ImageView.js.map