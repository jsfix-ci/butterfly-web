"use strict";
// Generated by Butterfly TypeScript converter
// File: views/ViewWithText.ext.kt
// Package: com.lightningkite.butterfly.views
Object.defineProperty(exports, "__esModule", { value: true });
const iterable_operator_1 = require("iterable-operator");
const entityMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '/': '&#x2F;',
    '`': '&#x60;',
    '=': '&#x3D;',
    '\n': '<br/>'
};
function escapeHtml(s) {
    return String(s).replace(/[&<>"'`=\n\/]/g, function fromEntityMap(c) {
        return entityMap[c];
    });
}
function setViewText(view, text) {
    if (view instanceof HTMLInputElement) {
        const labels = view.labels;
        if (labels) {
            for (const index of iterable_operator_1.range(0, labels.length)) {
                const labelView = labels.item(index);
                for (const index of iterable_operator_1.range(0, labelView.childNodes.length)) {
                    const subview = labelView.childNodes.item(index);
                    if (subview instanceof HTMLElement && subview.classList.contains("butterfly-label")) {
                        setViewText(subview, text);
                    }
                }
            }
        }
        const p = view.parentElement;
        if (p) {
            for (const index of iterable_operator_1.range(0, p.childNodes.length)) {
                const subview = p.childNodes.item(index);
                if (subview instanceof HTMLElement && subview.classList.contains("butterfly-label")) {
                    setViewText(subview, text);
                }
            }
        }
    }
    else {
        view.innerHTML = escapeHtml(text);
    }
}
exports.setViewText = setViewText;
//# sourceMappingURL=ViewWithText.ext.js.map