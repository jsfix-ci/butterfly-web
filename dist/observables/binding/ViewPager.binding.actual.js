"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Generated by Butterfly TypeScript converter
// File: observables/binding/ViewPager.binding.actual.kt
// Package: com.lightningkite.butterfly.observables.binding
const ObservableProperty_ext_shared_1 = require("../ObservableProperty.ext.shared");
const DisposeCondition_actual_1 = require("../../rx/DisposeCondition.actual");
const StandardObservableProperty_shared_1 = require("../StandardObservableProperty.shared");
const View_ext_actual_1 = require("../../views/View.ext.actual");
const SwapView_1 = require("../../views/SwapView");
const CombineObservableProperty_1 = require("../CombineObservableProperty");
/*
We need:
- A main view that swaps
- A left button
- A right button
Such should be generated by the XML.
 */
//! Declares com.lightningkite.butterfly.observables.binding.bind>androidx.viewpager.widget.ViewPager
function xViewPagerBindStatic(this_, items, showIndex = new StandardObservableProperty_shared_1.StandardObservableProperty(0, undefined), makeView) {
    const content = View_ext_actual_1.findView(this_, (e) => e.classList.contains("butterfly-pager-content"));
    const left = View_ext_actual_1.findView(this_, (e) => e.classList.contains("butterfly-pager-left"));
    const right = View_ext_actual_1.findView(this_, (e) => e.classList.contains("butterfly-pager-right"));
    if (!content || !left || !right)
        return;
    let pastIndex = showIndex.value;
    DisposeCondition_actual_1.xDisposableUntil(ObservableProperty_ext_shared_1.xObservablePropertySubscribeBy(showIndex, undefined, undefined, (it) => {
        if (it < 0 || it >= items.length)
            return;
        const newView = makeView(items[it]);
        let animation = "butterfly-animate-fade";
        if (it > pastIndex) {
            animation = "butterfly-animate-push";
        }
        else if (it < pastIndex) {
            animation = "butterfly-animate-pop";
        }
        pastIndex = it;
        SwapView_1.swapViewSwap(content, newView, animation);
    }), DisposeCondition_actual_1.xViewRemovedGet(this_));
    left.onclick = (ev) => {
        ev.preventDefault();
        if (showIndex.value > 0) {
            showIndex.value--;
        }
    };
    right.onclick = (ev) => {
        ev.preventDefault();
        if (showIndex.value < items.length - 1) {
            showIndex.value++;
        }
    };
}
exports.xViewPagerBindStatic = xViewPagerBindStatic;
//! Declares com.lightningkite.butterfly.observables.binding.bind>androidx.viewpager.widget.ViewPager
function xViewPagerBind(this_, items, _default, showIndex = new StandardObservableProperty_shared_1.StandardObservableProperty(0, undefined), makeView) {
    const content = View_ext_actual_1.findView(this_, (e) => e.classList.contains("butterfly-pager-content"));
    const left = View_ext_actual_1.findView(this_, (e) => e.classList.contains("butterfly-pager-left"));
    const right = View_ext_actual_1.findView(this_, (e) => e.classList.contains("butterfly-pager-right"));
    if (!content || !left || !right)
        return;
    let pastIndex = showIndex.value;
    const combined = CombineObservableProperty_1.xObservablePropertyCombine(items, showIndex, (a, b) => [a, b]);
    let currentObs = new StandardObservableProperty_shared_1.StandardObservableProperty(_default);
    DisposeCondition_actual_1.xDisposableUntil(ObservableProperty_ext_shared_1.xObservablePropertySubscribeBy(items, undefined, undefined, (newItems) => {
        let newItem = newItems[showIndex.value];
        if (newItem) {
            currentObs.value = newItem;
        }
        else {
            showIndex.value = newItems.length - 1;
        }
    }), DisposeCondition_actual_1.xViewRemovedGet(this_));
    DisposeCondition_actual_1.xDisposableUntil(ObservableProperty_ext_shared_1.xObservablePropertySubscribeBy(showIndex, undefined, undefined, (it) => {
        if (it < 0 || it >= items.value.length)
            return;
        let currentObs = new StandardObservableProperty_shared_1.StandardObservableProperty(items.value[it]);
        const newView = makeView(currentObs);
        let animation = "butterfly-animate-fade";
        if (it > pastIndex) {
            animation = "butterfly-animate-push";
        }
        else if (it < pastIndex) {
            animation = "butterfly-animate-pop";
        }
        pastIndex = it;
        SwapView_1.swapViewSwap(content, newView, animation);
    }), DisposeCondition_actual_1.xViewRemovedGet(this_));
    left.onclick = (ev) => {
        ev.preventDefault();
        if (showIndex.value > 0) {
            showIndex.value--;
        }
    };
    right.onclick = (ev) => {
        ev.preventDefault();
        if (showIndex.value < items.value.length - 1) {
            showIndex.value++;
        }
    };
}
exports.xViewPagerBind = xViewPagerBind;
//# sourceMappingURL=ViewPager.binding.actual.js.map