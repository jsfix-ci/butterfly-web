"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Generated by Butterfly TypeScript converter 
// File: observables/binding/RecyclerView.binding.kt
// Package: com.lightningkite.butterfly.observables.binding
const ObservableProperty_ext_1 = require("../ObservableProperty.ext");
const DisposeCondition_ext_1 = require("../../rx/DisposeCondition.ext");
const StandardObservableProperty_1 = require("../StandardObservableProperty");
const Kotlin_1 = require("../../Kotlin");
const LinearLayout_binding_1 = require("./LinearLayout.binding");
const LinearLayout_1 = require("../../views/LinearLayout");
const Align_1 = require("../../views/geometry/Align");
const viewAttached_1 = require("../../views/viewAttached");
//! Declares com.lightningkite.butterfly.observables.binding.whenScrolledToEnd>androidx.recyclerview.widget.RecyclerView
function xRecyclerViewWhenScrolledToEnd(this_, action) {
    this_._onScrollToEnd = action;
    this_.addEventListener("scroll", (ev) => {
        if (this_.scrollTop >= this_.scrollHeight - this_.offsetHeight - 10) {
            action();
        }
    });
}
exports.xRecyclerViewWhenScrolledToEnd = xRecyclerViewWhenScrolledToEnd;
//! Declares com.lightningkite.butterfly.observables.binding.reverseDirection>androidx.recyclerview.widget.RecyclerView
function xRecyclerViewReverseDirectionGet(this_) {
    return this_.style.flexDirection.endsWith("reverse");
}
exports.xRecyclerViewReverseDirectionGet = xRecyclerViewReverseDirectionGet;
function xRecyclerViewReverseDirectionSet(this_, value) {
    const existing = this_.style.flexDirection;
    if (existing.startsWith("row")) {
        if (value) {
            this_.style.flexDirection = "row-reverse";
        }
        else {
            this_.style.flexDirection = "row";
        }
    }
    else {
        if (value) {
            this_.style.flexDirection = "column-reverse";
        }
        else {
            this_.style.flexDirection = "column";
        }
    }
    this_.style.display = "flex";
    return;
}
exports.xRecyclerViewReverseDirectionSet = xRecyclerViewReverseDirectionSet;
//! Declares com.lightningkite.butterfly.observables.binding.bind>androidx.recyclerview.widget.RecyclerView
function xRecyclerViewBind(this_, data, defaultValue, makeView) {
    const existingViews = [];
    DisposeCondition_ext_1.xDisposableUntil(ObservableProperty_ext_1.xObservablePropertySubscribeBy(data, undefined, undefined, (value) => {
        //Fix view count
        const excessViews = existingViews.length - value.length;
        if (excessViews > 0) {
            //remove views
            for (const iter of new Kotlin_1.NumberRange(1, excessViews)) {
                const old = existingViews.splice((existingViews.length - 1), 1)[0];
                this_.removeChild(old.view);
            }
        }
        else {
            if (existingViews.length < value.length) {
                //add views
                for (const iter of new Kotlin_1.NumberRange(1, ((-excessViews)))) {
                    const prop = new StandardObservableProperty_1.StandardObservableProperty(defaultValue, undefined);
                    const view = makeView(prop);
                    this_.appendChild(LinearLayout_1.xLinearLayoutParams(this_, undefined, undefined, undefined, undefined, undefined, undefined, Align_1.AlignPair.Companion.INSTANCE.centerFill, undefined)(view));
                    existingViews.push(new LinearLayout_binding_1.LinearLayoutBoundSubview(view, prop));
                }
            }
        }
        //Update views
        for (const index of new Kotlin_1.NumberRange(0, value.length - 1)) {
            existingViews[index].property.value = value[index];
        }
        if (this_.scrollTop >= this_.scrollHeight - this_.offsetHeight - 10 && this_._onScrollToEnd) {
            this_._onScrollToEnd();
        }
    }), DisposeCondition_ext_1.xViewRemovedGet(this_));
}
exports.xRecyclerViewBind = xRecyclerViewBind;
class RVTypeHandler {
    constructor() {
        this.handlers = [];
    }
    handle(T, defaultValue, action) {
        this.handlers.push({
            type: T,
            defaultValue: defaultValue,
            action: action,
            buffer: []
        });
    }
}
exports.RVTypeHandler = RVTypeHandler;
//! Declares com.lightningkite.butterfly.observables.binding.bindMulti>androidx.recyclerview.widget.RecyclerView
function recyclerViewBindMultiType(this_, viewDependency, data, typeHandlerSetup) {
    const h = new RVTypeHandler();
    typeHandlerSetup(h);
    xRecyclerViewBindMulti(this_, data, null, (x) => h.handlers.findIndex((handler) => Kotlin_1.checkReified(x, handler.type)), (type, prop) => {
        const handler = h.handlers[type];
        if (handler) {
            return handler.action(prop);
        }
        else {
            return document.createElement("div");
        }
    });
}
exports.recyclerViewBindMultiType = recyclerViewBindMultiType;
//! Declares com.lightningkite.butterfly.observables.binding.bindMulti>androidx.recyclerview.widget.RecyclerView
function xRecyclerViewBindMulti(this_, data, defaultValue, determineType, makeView) {
    let existingViews = new Map();
    DisposeCondition_ext_1.xDisposableUntil(ObservableProperty_ext_1.xObservablePropertySubscribeBy(data, undefined, undefined, (value) => {
        var _a, _b, _c;
        //Place views
        const unusedViews = existingViews;
        while (this_.firstElementChild) {
            this_.firstElementChild.remove();
        }
        existingViews = new Map();
        for (const item of value) {
            const type = determineType(item);
            const view = (_b = (_a = unusedViews.get(type)) === null || _a === void 0 ? void 0 : _a.pop()) !== null && _b !== void 0 ? _b : (() => {
                const obs = new StandardObservableProperty_1.StandardObservableProperty(item);
                return [obs, makeView(type, obs)];
            })();
            view[0].value = item;
            if (this_.style.flexDirection.startsWith("column")) {
                view[1].style.width = "100%";
            }
            else {
                view[1].style.height = "100%";
            }
            this_.appendChild(view[1]);
            const sublist = (_c = existingViews.get(type)) !== null && _c !== void 0 ? _c : [];
            sublist.push(view);
            existingViews.set(type, sublist);
        }
        for (const entry of unusedViews) {
            for (const part of entry[1]) {
                viewAttached_1.triggerDetatchEvent(part[1]);
            }
        }
        if (this_.scrollTop >= this_.scrollHeight - this_.offsetHeight - 10 && this_._onScrollToEnd) {
            this_._onScrollToEnd();
        }
    }), DisposeCondition_ext_1.xViewRemovedGet(this_));
}
exports.xRecyclerViewBindMulti = xRecyclerViewBindMulti;
//! Declares com.lightningkite.butterfly.observables.binding.bindRefresh>androidx.recyclerview.widget.RecyclerView
function xRecyclerViewBindRefresh(this_, loading, refresh) {
    const actualRefreshView = this_.parentElement;
    let actualRefreshButton = null;
    for (let i = 0; i < actualRefreshView.children.length; i++) {
        const view = actualRefreshView.children.item(i);
        if (view.classList.contains("butterfly-refresh-button")) {
            actualRefreshButton = view;
        }
    }
    if (actualRefreshButton) {
        actualRefreshButton.onclick = (x) => {
            refresh();
        };
        DisposeCondition_ext_1.xDisposableUntil(ObservableProperty_ext_1.xObservablePropertySubscribeBy(loading, undefined, undefined, (x) => {
            if (actualRefreshButton) {
                if (x) {
                    actualRefreshButton.classList.add("butterfly-refresh-button-loading");
                }
                else {
                    actualRefreshButton.classList.remove("butterfly-refresh-button-loading");
                }
            }
        }), DisposeCondition_ext_1.xViewRemovedGet(actualRefreshButton));
    }
}
exports.xRecyclerViewBindRefresh = xRecyclerViewBindRefresh;
//# sourceMappingURL=RecyclerView.binding.js.map