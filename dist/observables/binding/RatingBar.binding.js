"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Generated by Butterfly TypeScript converter
// File: observables/binding/RatingBar.binding.kt
// Package: com.lightningkite.butterfly.observables.binding
const ObservableProperty_ext_1 = require("../ObservableProperty.ext");
const DisposeCondition_ext_1 = require("../../rx/DisposeCondition.ext");
//! Declares com.lightningkite.butterfly.observables.binding.bind>android.widget.RatingBar
function xRatingBarBindMutable(this_, stars, observable) {
    xRatingBarBind(this_, stars, observable);
    const input = document.createElement("input");
    input.type = "range";
    input.min = "1";
    input.max = stars.toString();
    input.style.display = "none";
    this_.appendChild(input);
    let suppress = false;
    DisposeCondition_ext_1.xDisposableUntil(ObservableProperty_ext_1.xObservablePropertySubscribeBy(observable, undefined, undefined, (value) => {
        if (!suppress) {
            suppress = true;
            input.valueAsNumber = (value);
            suppress = false;
        }
    }), DisposeCondition_ext_1.xViewRemovedGet(input));
    input.oninput = (e) => {
        if (!suppress) {
            suppress = true;
            observable.value = input.valueAsNumber;
            suppress = false;
        }
    };
    this_.tabIndex = 0;
    this_.addEventListener("keydown", (ev) => {
        switch (ev.code) {
            case "ArrowRight":
                ev.preventDefault();
                if (observable.value < stars) {
                    observable.value++;
                }
                break;
            case "ArrowLeft":
                ev.preventDefault();
                if (observable.value > 1) {
                    observable.value--;
                }
                break;
        }
    });
    for (let i = 0; i < stars; i++) {
        const e = this_.children.item(i);
        e.onclick = (ev) => {
            ev.stopPropagation();
            observable.value = i + 1;
        };
    }
}
exports.xRatingBarBindMutable = xRatingBarBindMutable;
//! Declares com.lightningkite.butterfly.observables.binding.bind>android.widget.RatingBar
function xRatingBarBind(this_, stars, observable) {
    for (let i = 0; i < stars; i++) {
        const e = document.createElement("div");
        e.classList.add("butterfly-rating-bar-star");
        this_.appendChild(e);
    }
    DisposeCondition_ext_1.xDisposableUntil(ObservableProperty_ext_1.xObservablePropertySubscribeBy(observable, undefined, undefined, (rating) => {
        for (let i = 0; i < stars; i++) {
            const e = this_.children.item(i);
            if (Math.round(i + 1) <= Math.round(rating)) {
                e.classList.add("butterfly-rating-bar-star-on");
            }
            else {
                e.classList.remove("butterfly-rating-bar-star-on");
            }
        }
    }), DisposeCondition_ext_1.xViewRemovedGet(this_));
}
exports.xRatingBarBind = xRatingBarBind;
//! Declares com.lightningkite.butterfly.observables.binding.bindFloat>android.widget.RatingBar
function xRatingBarBindFloatMutable(this_, stars, observable) {
    xRatingBarBindMutable(this_, stars, observable);
}
exports.xRatingBarBindFloatMutable = xRatingBarBindFloatMutable;
//! Declares com.lightningkite.butterfly.observables.binding.bindFloat>android.widget.RatingBar
function xRatingBarBindFloat(this_, stars, observable) {
    xRatingBarBind(this_, stars, observable);
}
exports.xRatingBarBindFloat = xRatingBarBindFloat;
//# sourceMappingURL=RatingBar.binding.js.map