"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: observables/binding/LinearLayout.binding.kt
// Package: com.lightningkite.butterfly.observables.binding
const Kotlin_1 = require("../../Kotlin");
const DisposeCondition_ext_1 = require("../../rx/DisposeCondition.ext");
const StandardObservableProperty_1 = require("../StandardObservableProperty");
const Align_1 = require("../../views/geometry/Align");
const LinearLayout_1 = require("../../views/LinearLayout");
const ObservableProperty_ext_1 = require("../ObservableProperty.ext");
//! Declares com.lightningkite.butterfly.observables.binding.LinearLayoutBoundSubview
class LinearLayoutBoundSubview {
    constructor(view, property) {
        this.view = view;
        this.property = property;
    }
}
exports.LinearLayoutBoundSubview = LinearLayoutBoundSubview;
//! Declares com.lightningkite.butterfly.observables.binding.bind>android.widget.LinearLayout
function xLinearLayoutBind(this_, data, defaultValue, makeView) {
    const existingViews = [];
    DisposeCondition_ext_1.xDisposableUntil(ObservableProperty_ext_1.xObservablePropertySubscribeBy(data, undefined, undefined, (value) => {
        //Fix view count
        const excessViews = existingViews.length - value.length;
        if (excessViews > 0) {
            //remove views
            for (const iter of new Kotlin_1.NumberRange(1, excessViews)) {
                const old = existingViews.splice((existingViews.length - 1), 1)[0];
                this_.removeChild(old.view);
            }
        }
        else {
            if (existingViews.length < value.length) {
                //add views
                for (const iter of new Kotlin_1.NumberRange(1, ((-excessViews)))) {
                    const prop = new StandardObservableProperty_1.StandardObservableProperty(defaultValue, undefined);
                    const view = makeView(prop);
                    this_.appendChild(LinearLayout_1.xLinearLayoutParams(this_, undefined, undefined, undefined, undefined, undefined, undefined, Align_1.AlignPair.Companion.INSTANCE.centerFill, undefined)(view));
                    existingViews.push(new LinearLayoutBoundSubview(view, prop));
                }
            }
        }
        //Update views
        for (const index of new Kotlin_1.NumberRange(0, value.length - 1)) {
            existingViews[index].property.value = value[index];
        }
    }), DisposeCondition_ext_1.xViewRemovedGet(this_));
}
exports.xLinearLayoutBind = xLinearLayoutBind;
//! Declares com.lightningkite.butterfly.observables.binding.bindHorizontal>android.widget.LinearLayout
function xLinearLayoutBindHorizontal(this_, data, defaultValue, makeView) {
    const existingViews = [];
    DisposeCondition_ext_1.xDisposableUntil(ObservableProperty_ext_1.xObservablePropertySubscribeBy(data, undefined, undefined, (value) => {
        //Fix view count
        const excessViews = existingViews.length - value.length;
        if (excessViews > 0) {
            //remove views
            for (const iter of new Kotlin_1.NumberRange(1, excessViews)) {
                const old = existingViews.splice((existingViews.length - 1), 1)[0];
                this_.removeChild(old.view);
            }
        }
        else {
            if (existingViews.length < value.length) {
                //add views
                for (const iter of new Kotlin_1.NumberRange(1, ((-excessViews)))) {
                    const prop = new StandardObservableProperty_1.StandardObservableProperty(defaultValue, undefined);
                    const view = makeView(prop);
                    this_.appendChild(LinearLayout_1.xLinearLayoutParams(this_, undefined, undefined, undefined, undefined, undefined, undefined, Align_1.AlignPair.Companion.INSTANCE.center, undefined)(view));
                    existingViews.push(new LinearLayoutBoundSubview(view, prop));
                }
            }
        }
        //Update views
        for (const index of new Kotlin_1.NumberRange(0, value.length - 1)) {
            existingViews[index].property.value = value[index];
        }
    }), DisposeCondition_ext_1.xViewRemovedGet(this_));
}
exports.xLinearLayoutBindHorizontal = xLinearLayoutBindHorizontal;
//# sourceMappingURL=LinearLayout.binding.js.map