"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Generated by Butterfly TypeScript converter - this file will be overwritten.
// File: observables/DistinctObservableProperty.shared.kt
// Package: com.lightningkite.butterfly.observables
const operators_1 = require("rxjs/operators");
const ObservableProperty_shared_1 = require("./ObservableProperty.shared");
const rxjs_1 = require("rxjs");
//! Declares com.lightningkite.butterfly.observables.RxTransformationOnlyObservableProperty
class RxTransformationOnlyObservableProperty extends ObservableProperty_shared_1.ObservableProperty {
    constructor(basedOn, operator) {
        super();
        this.basedOn = basedOn;
        this.operator = operator;
    }
    //! Declares com.lightningkite.butterfly.observables.RxTransformationOnlyObservableProperty.value
    get value() { return this.basedOn.value; }
    //! Declares com.lightningkite.butterfly.observables.RxTransformationOnlyObservableProperty.onChange
    get onChange() { return this.operator(this.basedOn.onChange); }
}
exports.RxTransformationOnlyObservableProperty = RxTransformationOnlyObservableProperty;
//! Declares com.lightningkite.butterfly.observables.distinctUntilChanged>com.lightningkite.butterfly.observables.ObservableProperty<kotlin.Any>
function xObservablePropertyDistinctUntilChanged(this_) {
    return xObservablePropertyPlusRx(this_, (it) => rxjs_1.concat(rxjs_1.of(this_.value), it).pipe(operators_1.distinctUntilChanged()).pipe(operators_1.skip(0)));
}
exports.xObservablePropertyDistinctUntilChanged = xObservablePropertyDistinctUntilChanged;
//! Declares com.lightningkite.butterfly.observables.plusRx>com.lightningkite.butterfly.observables.ObservableProperty<kotlin.Any>
function xObservablePropertyPlusRx(this_, operator) {
    return new RxTransformationOnlyObservableProperty(this_, operator);
}
exports.xObservablePropertyPlusRx = xObservablePropertyPlusRx;
//# sourceMappingURL=DistinctObservableProperty.shared.js.map