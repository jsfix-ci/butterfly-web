"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Generated by Butterfly TypeScript converter - this file will be overwritten.
// File: observables/FlatMappedObservableProperty.shared.kt
// Package: com.lightningkite.butterfly.observables
const operators_1 = require("rxjs/operators");
const ObservableProperty_shared_1 = require("./ObservableProperty.shared");
const ObservableProperty_ext_shared_1 = require("./ObservableProperty.ext.shared");
const ConstantObservableProperty_shared_1 = require("./ConstantObservableProperty.shared");
const MutableObservableProperty_shared_1 = require("./MutableObservableProperty.shared");
//! Declares com.lightningkite.butterfly.observables.FlatMappedObservableProperty
class FlatMappedObservableProperty extends ObservableProperty_shared_1.ObservableProperty {
    constructor(basedOn, transformation) {
        super();
        this.basedOn = basedOn;
        this.transformation = transformation;
    }
    //! Declares com.lightningkite.butterfly.observables.FlatMappedObservableProperty.value
    get value() { return this.transformation(this.basedOn.value).value; }
    //! Declares com.lightningkite.butterfly.observables.FlatMappedObservableProperty.onChange
    get onChange() {
        const transformCopy = this.transformation;
        return ObservableProperty_ext_shared_1.xObservablePropertyObservableGet(this.basedOn).pipe(operators_1.switchMap((it) => ObservableProperty_ext_shared_1.xObservablePropertyObservableGet(transformCopy(it)))).pipe(operators_1.skip(0));
    }
}
exports.FlatMappedObservableProperty = FlatMappedObservableProperty;
//! Declares com.lightningkite.butterfly.observables.switchMap>com.lightningkite.butterfly.observables.ObservableProperty<kotlin.Any>
function xObservablePropertySwitchMap(this_, transformation) {
    return new FlatMappedObservableProperty(this_, transformation);
}
exports.xObservablePropertySwitchMap = xObservablePropertySwitchMap;
//! Declares com.lightningkite.butterfly.observables.flatMap>com.lightningkite.butterfly.observables.ObservableProperty<kotlin.Any>
function xObservablePropertyFlatMap(this_, transformation) {
    return new FlatMappedObservableProperty(this_, transformation);
}
exports.xObservablePropertyFlatMap = xObservablePropertyFlatMap;
//! Declares com.lightningkite.butterfly.observables.switchMapNotNull>com.lightningkite.butterfly.observables.ObservableProperty<kotlin.Any>
function xObservablePropertySwitchMapNotNull(this_, transformation) {
    return new FlatMappedObservableProperty(this_, (item) => (() => {
        if (item !== null) {
            return transformation(item);
        }
        else {
            return new ConstantObservableProperty_shared_1.ConstantObservableProperty(null);
        }
    })());
}
exports.xObservablePropertySwitchMapNotNull = xObservablePropertySwitchMapNotNull;
//! Declares com.lightningkite.butterfly.observables.flatMapNotNull>com.lightningkite.butterfly.observables.ObservableProperty<kotlin.Any>
function xObservablePropertyFlatMapNotNull(this_, transformation) {
    return new FlatMappedObservableProperty(this_, (item) => (() => {
        if (item !== null) {
            return transformation(item);
        }
        else {
            return new ConstantObservableProperty_shared_1.ConstantObservableProperty(null);
        }
    })());
}
exports.xObservablePropertyFlatMapNotNull = xObservablePropertyFlatMapNotNull;
//! Declares com.lightningkite.butterfly.observables.MutableFlatMappedObservableProperty
class MutableFlatMappedObservableProperty extends MutableObservableProperty_shared_1.MutableObservableProperty {
    constructor(basedOn, transformation) {
        super();
        this.basedOn = basedOn;
        this.transformation = transformation;
        this.lastProperty = null;
    }
    //! Declares com.lightningkite.butterfly.observables.MutableFlatMappedObservableProperty.value
    get value() { return this.transformation(this.basedOn.value).value; }
    set value(value) {
        this.transformation(this.basedOn.value).value = value;
    }
    //! Declares com.lightningkite.butterfly.observables.MutableFlatMappedObservableProperty.onChange
    get onChange() {
        const transformCopy = this.transformation;
        return ObservableProperty_ext_shared_1.xObservablePropertyObservableGet(this.basedOn).pipe(operators_1.switchMap((it) => {
            const prop = transformCopy(it);
            if (this !== null) {
                this.lastProperty = prop;
            }
            ;
            return ObservableProperty_ext_shared_1.xObservablePropertyObservableGet(prop);
        })).pipe(operators_1.skip(0));
    }
    update() {
        var _a;
        (_a = this.lastProperty) === null || _a === void 0 ? void 0 : _a.update();
    }
}
exports.MutableFlatMappedObservableProperty = MutableFlatMappedObservableProperty;
//! Declares com.lightningkite.butterfly.observables.switchMapMutable>com.lightningkite.butterfly.observables.ObservableProperty<kotlin.Any>
function xObservablePropertySwitchMapMutable(this_, transformation) {
    return new MutableFlatMappedObservableProperty(this_, transformation);
}
exports.xObservablePropertySwitchMapMutable = xObservablePropertySwitchMapMutable;
//! Declares com.lightningkite.butterfly.observables.flatMapMutable>com.lightningkite.butterfly.observables.ObservableProperty<kotlin.Any>
function xObservablePropertyFlatMapMutable(this_, transformation) {
    return new MutableFlatMappedObservableProperty(this_, transformation);
}
exports.xObservablePropertyFlatMapMutable = xObservablePropertyFlatMapMutable;
//# sourceMappingURL=FlatMappedObservableProperty.shared.js.map